syntax = "proto3";

package api.envoy.config.core.v3;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3";

// HTTP request method.
enum RequestMethod {
  METHOD_UNSPECIFIED = 0;
  GET = 1;
  HEAD = 2;
  POST = 3;
  PUT = 4;
  DELETE = 5;
  CONNECT = 6;
  OPTIONS = 7;
  TRACE = 8;
  PATCH = 9;
}

// Identifies the direction of the traffic relative to the local Envoy.
enum TrafficDirection {
  // Default option is unspecified.
  UNSPECIFIED = 0;

  // The transport is used for incoming traffic.
  INBOUND = 1;

  // The transport is used for outgoing traffic.
  OUTBOUND = 2;
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map, usually from
// filter name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// Another example use of metadata is to per service config info in cluster metadata, which may get
// consumed by multiple filters.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
// * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
// [#next-major-version: move to type/metadata/v2]
message Metadata {
  // Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
  // namespace is reserved for Envoy's built-in filters.
  // If both ``filter_metadata`` and
  // :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
  // fields are present in the metadata with same keys,
  // only ``typed_filter_metadata`` field will be parsed.
  map<string, google.protobuf.Struct> filter_metadata = 1;

  // Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
  // namespace is reserved for Envoy's built-in filters.
  // The value is encoded as google.protobuf.Any.
  // If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
  // and ``typed_filter_metadata`` fields are present in the metadata with same keys,
  // only ``typed_filter_metadata`` field will be parsed.
  map<string, google.protobuf.Any> typed_filter_metadata = 2;
}

// Header name/value pair.
message HeaderValue {
  // Header name.
  string key = 1;

  // Header value.
  //
  // The same :ref:`format specifier <config_access_log_format>` as used for
  // :ref:`HTTP access logging <config_access_log>` applies here, however
  // unknown header values are replaced with the empty string instead of ``-``.
  // Header value is encoded as string. This does not work for non-utf8 characters.
  // Only one of ``value`` or ``raw_value`` can be set.
  string value = 2;

  // Header value is encoded as bytes which can support non-utf8 characters.
  // Only one of ``value`` or ``raw_value`` can be set.
  bytes raw_value = 3;
}

// Wrapper for a set of headers.
message HeaderMap {
  repeated HeaderValue headers = 1;
}
